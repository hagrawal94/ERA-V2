import albumentations as A
from albumentations.pytorch import ToTensorV2

class CIFAR10Albumentations(datasets.CIFAR10):
    def __init__(self, root, train=True, download=True, transform=None, albumentations_transform=None):
        super(CIFAR10Albumentations, self).__init__(root, train=train, download=download, transform=transform)
        self.albumentations_transform = albumentations_transform

    def __getitem__(self, index):
        # Fetching the image and label from the CIFAR10 dataset
        img, label = super(CIFAR10Albumentations, self).__getitem__(index)

        # Convert PIL image to numpy array
        img = np.array(img)

        # Apply Albumentations transformations
        if self.albumentations_transform:
            augmented = self.albumentations_transform(image=img)
            img = augmented['image']

        return img, label

# Dataset mean and std for normalization
mean = (0.4914, 0.4822, 0.4465)
std = (0.2023, 0.1994, 0.2010)

# Define the train transformations using Albumentations
train_transforms = A.Compose([
                              A.HorizontalFlip(p=0.5),  # Horizontal flip with 50% probability
                              A.ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.1, rotate_limit=15, p=0.5),  # ShiftScaleRotate
                              A.CoarseDropout(max_holes=1, max_height=16, max_width=16, min_holes=1, min_height=16, min_width=16, fill_value=tuple([x * 255 for x in mean]), p=0.5),  # CoarseDropout
                              A.Normalize(mean=mean, std=std),  # Normalize
                              ToTensorV2()  # Convert to tensor
                              ])

# Test Phase transformations
test_transforms = transforms.Compose([
                                      #  transforms.Resize((28, 28)),
                                      #  transforms.ColorJitter(brightness=0.10, contrast=0.1, saturation=0.10, hue=0.1),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
                                       ])


# train = datasets.CIFAR10(root='./data', train=True,
#                                         download=True, transform=train_transforms)
test = datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=test_transforms)

SEED = 1

# CUDA?
cuda = torch.cuda.is_available()
print("CUDA Available?", cuda)

# For reproducibility
torch.manual_seed(SEED)

if cuda:
    torch.cuda.manual_seed(SEED)

# dataloader arguments - something you'll fetch these from cmdprmt
dataloader_args = dict(shuffle=True, batch_size=512, num_workers=4, pin_memory=True) if cuda else dict(shuffle=True, batch_size=64)

# train dataloader
train_dataset = CIFAR10Albumentations(root='./data', train=True, download=True, albumentations_transform=train_transforms)
train_loader = torch.utils.data.DataLoader(train_dataset, **dataloader_args)

# test dataloader
test_loader = torch.utils.data.DataLoader(test, **dataloader_args)
